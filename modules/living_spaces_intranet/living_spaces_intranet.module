<?php

/**
 * @file
 * Contains functions and hooks for living_spaces_intranet.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\living_spaces_intranet\Entity\LivingSpacesBanInterface;

/**
 * Implements hook_cron().
 */
function living_spaces_intranet_cron() {
  $storage = \Drupal::entityTypeManager()->getStorage('living_spaces_ban');

  $query = $storage->getQuery();
  $query->condition('expire', \Drupal::time()->getRequestTime(), '<');
  $query->accessCheck(FALSE);
  $query->range(0, 40);

  if ($ids = $query->execute()) {
    $bans = $storage->loadMultiple($ids);
    $storage->delete($bans);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_intranet_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'living_spaces_intranet_user_login_validate';
}

/**
 * Provides validate callback for user login form.
 */
function living_spaces_intranet_user_login_validate(&$form, FormStateInterface $form_state) {
  if ($account = user_load_by_name($form_state->getValue('name'))) {
    /** @var \Drupal\living_spaces_intranet\LivingSpacesBansManagerInterface $ban_manager */
    $ban_manager = \Drupal::service('living_spaces_bans.manager');

    if ($ban_manager->getUserBans($account, ['global'])) {
      $form_state->setErrorByName('name', t('This account has been temporarily suspended.'));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_intranet_living_spaces_ban_insert(LivingSpacesBanInterface $entity) {
  if ('global' == $entity->bundle() && !$entity->get('target_user')->isEmpty()) {
    /** @var \Drupal\user\UserInterface $target */
    $target = $entity->get('target_user')->entity;
    $target->block();
    $target->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function living_spaces_intranet_living_spaces_ban_delete(LivingSpacesBanInterface $entity) {
  if ('global' == $entity->bundle() && !$entity->get('target_user')->isEmpty()) {
    /** @var \Drupal\user\UserInterface $target */
    $target = $entity->get('target_user')->entity;
    $target->activate();
    $target->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function living_spaces_intranet_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\user\UserInterface $current */
  $current = User::load($account->id());

  /** @var \Drupal\user\UserInterface $entity */
  if ($operation === 'delete' && in_array('client_admin', $current->getRoles())) {
    $weights = living_spaces_users_get_role_weights();
    $current_user_level = living_spaces_users_get_user_level($current, $weights);
    $user_level = living_spaces_users_get_user_level($entity, $weights);
    // Disable access to delete if user has higher weight than current user.
    if ($current_user_level < $user_level) {
      return AccessResult::forbidden();
    }
  }

  $own_spaces = $current->get('joined_spaces')->getValue();
  $own_spaces = array_column($own_spaces, 'target_id');
  if ($own_spaces && ($entity->id() !== $account->id())) {
    $user_spaces = $entity->get('joined_spaces')->getValue();
    $user_spaces = array_column($user_spaces, 'target_id');

    $same = array_intersect($own_spaces, $user_spaces);
    if (
      ($operation === 'delete') &&
      $current->hasPermission('delete shared offices space members')
    ) {
      foreach ($same as $group_id) {
        /** @var \Drupal\group\Entity\GroupInterface $group */
        if (
          ($group = \Drupal::entityTypeManager()->getStorage('group')->load($group_id))
          && in_array(
            $group->getGroupType()->id(),
            ['project_space', 'department']
          )
          && $group->field_allow_admin_to_edit_member->value
          && \Drupal::service('living_spaces_group.manager')->isUserSpaceAdmin($account, $group)
        ) {
          return AccessResult::allowed();
        }
      }
    }

    if ($operation === 'view' && !empty($same)) {
      return AccessResult::allowed();
    }

    if ($operation === 'update') {
      foreach ($same as $group_id) {
        /** @var \Drupal\group\Entity\GroupInterface $group */
        if (
          ($group = \Drupal::entityTypeManager()->getStorage('group')->load($group_id))
          && in_array(
            $group->getGroupType()->id(),
            ['project_space', 'department']
          )
          && $group->field_allow_admin_to_edit_member->value
          && \Drupal::service('living_spaces_group.manager')->isUserSpaceAdmin($account, $group)
        ) {
          return AccessResult::allowed();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_query_TAG_alter().
 */
function living_spaces_intranet_query_entity_reference_alter(AlterableInterface $query) {
  $account = \Drupal::currentUser();
  if (
    $account->hasPermission('manage living spaces') ||
    $account->hasPermission('add members to any space') ||
    $account->hasPermission('add members to administered space')
  ) {
    return;
  }

  if ($query instanceof SelectInterface && 'user' == $query->getMetaData('entity_type')) {
    $living = \Drupal::service('living_spaces_group.manager')->getLivingSpaceGroupTypes();
    $membership_loader = \Drupal::service('group.membership_loader');

    $member = FALSE;
    $groups = [];
    foreach ($membership_loader->loadByUser($account) as $membership) {
      /** @var \Drupal\group\GroupMembership $membership */
      $group = $membership->getGroup();

      if ($living && !empty($living[$group->bundle()])) {
        $member = TRUE;
        $groups[$group->id()] = $group;
      }
    }

    if (!$member) {
      return;
    }

    $uids = [];
    foreach ($groups as $group) {
      foreach ($group->getContent('group_membership') as $content) {
        $id = $content->entity_id->entity->id();
        $uids[$id] = $id;
      }
    }

    if ($uids) {
      $query->condition('base_table.uid', $uids, 'IN');
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function living_spaces_intranet_entity_type_build(array &$entity_types) {
  $entity_types['user']->setFormClass('employee', 'Drupal\user\RegisterForm');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_intranet_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::configFactory();
  $config_settings = $config->getEditable('user.settings');
  $config_mail = $config->getEditable('user.mail');

  $form['email_admin_created_no_email'] = [
    '#type' => 'details',
    '#title' => t('Welcome (new user created by administrator with no e-mail address)'),
    '#group' => 'email',
  ];

  $form['email_admin_created_no_email']['email_admin_created_no_email_notify'] = [
    '#type' => 'checkbox',
    '#title' => t('Notify user'),
    '#default_value' => $config_settings->get('notify.email_admin_created_no_email'),
  ];

  $form['email_admin_created_no_email']['email_admin_created_no_email_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $config_mail->get('email_admin_created_no_email.subject'),
    '#maxlength' => 180,
    '#states' => [
      'invisible' => [
        'input[name="email_admin_created_no_email_notify"]' => ['checked' => FALSE],
      ],
    ],
  ];

  $form['email_admin_created_no_email']['email_admin_created_no_email_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $config_mail->get('email_admin_created_no_email.body'),
    '#rows' => 15,
    '#states' => [
      'invisible' => [
        'input[name="email_admin_created_no_email_notify"]' => ['checked' => FALSE],
      ],
    ],
  ];

  $form['actions']['submit']['#submit'][] = 'living_spaces_intranet_user_settings_form_submit';
}

/**
 * Provides submit callback for user admin settings form.
 */
function living_spaces_intranet_user_settings_form_submit($form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('user.mail')
    ->set('email_admin_created_no_email.subject', $form_state->getValue('email_admin_created_no_email_subject'))
    ->set('email_admin_created_no_email.body', $form_state->getValue('email_admin_created_no_email_body'))
    ->save();

  \Drupal::configFactory()->getEditable('user.settings')
    ->set('notify.email_admin_created_no_email', $form_state->getValue('email_admin_created_no_email_notify'))
    ->save();
}

/**
 * Implements hook_form_alter().
 */
function living_spaces_intranet_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
    case 'user_employee_form':
    case 'user_form':
      if (isset($form['account']['roles'])) {
        $form['account']['roles']['#required'] = TRUE;
      }
      break;

  }
}

/**
 * Implements hook_entity_field_access_alter().
 */
function living_spaces_intranet_entity_field_access_alter(array &$grants, array $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['field_definition'];

  if ('user' == $field_definition->getTargetEntityTypeId() &&
    'status' == $field_definition->getName() &&
    \Drupal::currentUser()->hasPermission('administer permissions')
  ) {
    $grants['living_spaces_intranet'] = AccessResult::allowed();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_intranet_form_user_employee_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['account']['pass']['#required'] = FALSE;
  $form['account']['pass']['#access'] = FALSE;

  $form['account']['notify']['#default_value'] = TRUE;
  $form['account']['notify']['#access'] = FALSE;

  $form['actions']['submit']['#submit'][] = 'living_spaces_intranet_employee_form_submit';
}

/**
 * Provides submit callback for user employee form.
 */
function living_spaces_intranet_employee_form_submit($form, FormStateInterface $form_state) {
  if (!\Drupal::config('user.settings')->get('notify.email_admin_created_no_email')) {
    return;
  }

  $account = $form_state->getFormObject()->getEntity();
  $notify = !$form_state->isValueEmpty('notify');

  if ($notify && $account->isActive() && !$account->getEmail()) {
    $params['account'] = $account;
    $user = \Drupal::currentUser();
    $mail = \Drupal::config('system.site')->get('mail');

    \Drupal::service('plugin.manager.mail')->mail('user', 'email_admin_created_no_email', $user->getEmail(), $user->getPreferredLangcode(), $params, $mail);

    $messenger = \Drupal::messenger();
    $messenger->deleteByType('status');
    $messenger->addStatus(t('The new user <a href=":url">%name</a> was created without an email address.', [
      ':url' => $account->toUrl()->toString(),
      '%name' => $account->getAccountName(),
    ]));
  }
}
