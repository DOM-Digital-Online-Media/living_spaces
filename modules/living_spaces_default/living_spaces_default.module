<?php

/**
 * @file
 * Contains functions and hooks for living_spaces_default.module.
 */

use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupRelationshipInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function living_spaces_default_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ('group' == $entity_type->id()) {
    $fields['is_default'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Default'))
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['template'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Template'))
      ->setSetting('target_type', 'group')
      ->setTranslatable(FALSE);
  }

  return $fields;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function living_spaces_default_form_group_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['is_default']['#access'] = \Drupal::currentUser()->hasPermission('manage living spaces default content');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_default_form_living_spaces_group_membership_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $info = $form_state->getBuildInfo();

  if (!empty($info['args'][0]) && $info['args'][0] instanceof GroupInterface) {
    /** @var \Drupal\group\Entity\GroupInterface $group */
    $group = $info['args'][0];

    if ($group->get('is_default')->getString()) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function living_spaces_default_query_entity_query_alter(SelectInterface $query) {
  $access_check = $query->hasTag('group_access');
  if ($query->getMetaData('entity_type') === 'group' && $access_check) {
    foreach ($query->getTables() as $table => $info) {
      if (is_array($info) && 'groups' == $info['table']) {
        $query->join('groups_field_data', 'groups_field_data', "groups_field_data.id = {$table}.id");

        $group = $query->orConditionGroup();
        $group->isNull('groups_field_data.is_default');
        $group->condition('groups_field_data.is_default', 0);
        $query->condition($group);
        break;
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function living_spaces_default_query_views_entity_query_alter(SelectInterface $query) {
  $access_check = $query->hasTag('group_access');
  if ($query->getMetaData('entity_type') === 'group' && $access_check) {
    $group = $query->orConditionGroup();
    $group->isNull('groups_field_data.is_default');
    $group->condition('groups_field_data.is_default', 0);
    $query->condition($group);
  }
}

/**
 * Implements hook_group_operations_alter().
 */
function living_spaces_default_group_operations_alter(array &$operations, GroupInterface $group) {
  if (array_key_exists('group-join', $operations) &&
    $group->get('is_default')->getString()
  ) {
    unset($operations['group-join']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_default_group_relationship_insert(GroupRelationshipInterface $relationship) {
  if ('c84c2661-b8e4-4759-a479-4b8c91a25dd8' == $relationship->getGroup()->uuid()) {
    drupal_register_shutdown_function('living_spaces_group_relationship_post_delete', $relationship);
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function living_spaces_default_group_prepare_form(GroupInterface $group, $operation, FormStateInterface $form_state) {
  $uuid = \Drupal::request()->query->get('space');
  if ('add' == $operation && !empty($uuid)) {
    $group_manager = \Drupal::entityTypeManager()->getStorage('group');
    $query = $group_manager->getQuery();
    $query->condition('uuid', $uuid);
    $query->accessCheck(FALSE);

    if ($gids = $query->execute()) {
      $gid = reset($gids);
      $template = $group_manager->load($gid);

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $template->createDuplicate();
      \Drupal::moduleHandler()->invokeAll('living_spaces_default_create', [$group, $template]);
      $group->setOwnerId(\Drupal::currentUser()->id());

      $object = $form_state->getFormObject();
      $object->setEntity($group);
    }
  }
}

/**
 * Implements hook_living_spaces_default_create().
 */
function living_spaces_default_living_spaces_default_create(GroupInterface $space, GroupInterface $template) {
  $space->set(LIVING_SPACES_SECTIONS_FIELD, NULL);
  $space->set('is_default', NULL);
  $space->set('template', $template->id());
  $space->set('protected', FALSE);

  if ($parent = \Drupal::request()->get('parent')) {
    $space->set('parent', reset($parent));
  }

  $info = \Drupal::moduleHandler()->invokeAll('living_spaces_group_type_info');
  if (!empty($info[$space->getGroupType()->id()]['title_callback'])) {
    $label = $info[$space->getGroupType()->id()]['title_callback']($space);
    $space->set('label', $label);
  }
}
