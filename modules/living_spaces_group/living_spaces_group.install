<?php

/**
 * @file
 * Install/update/uninstall hooks for group module.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_uninstall().
 */
function living_spaces_group_uninstall() {
  // Delete preinstalled content.
  $link_storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $link = $link_storage
    ->loadByProperties(['uuid' => [
      '21f299cd-b60c-4983-b863-879297d3bcd3',
      '9a19c43c-7cd4-4139-9f5c-ec8301aeabf3',
    ]]);
  if (!empty($link)) {
    $link_storage->delete($link);
  }
}

/**
 * Add a new menu link to the main menu.
 */
function living_spaces_group_update_9001(&$sandbox) {
  $link_storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

  $menu_link = $link_storage->create([
    'title' => 'Spaces',
    'link' => ['uri' => 'internal:/admin/group/spaces'],
    'menu_name' => 'main',
  ]);
  $menu_link->save();
}

/**
 * Add a field 'space' to entity types with enabled living space functionality.
 */
function living_spaces_group_update_9009(&$sandbox) {
  $entity_types = Drupal::service('living_spaces_group.manager')->getEntityTypesOfLivingSpaceGroupTypes();

  foreach ($entity_types as $entity_type) {
    if ($entity_type !== 'user') {
      $field_definition = BaseFieldDefinition::create('entity_reference')
        ->setLabel(t('Space'))
        ->setSetting('target_type', 'group')
        ->setTranslatable(FALSE);
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition('space', $entity_type, 'living_spaces_group', $field_definition);
    }
  }
}

/**
 * Remove a field 'space' from entity type 'user'.
 */
function living_spaces_group_update_9102(&$sandbox) {
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();
  // Delete the storage definition if it was defined before.
  $storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('space', 'user');
  if ($storage_definition) {
    $entity_definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
  }
}

/**
 * Add a field 'allow_admins_to_edit_members' to entity type 'group'.
 *
 * Set undefined field to TRUE for space types 'project_space' and 'department'.
 */
function living_spaces_group_update_9101(&$sandbox) {
  $field_name = 'allow_admins_to_edit_members';

  $definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Allow space admins to edit member accounts'))
    ->setDefaultValue(FALSE)
    ->setDisplayOptions('form', [
      'settings' => ['display_label' => TRUE],
      'weight' => 0,
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition($field_name, 'group', 'living_spaces_group', $definition);

  $entityStorage = \Drupal::entityTypeManager()->getStorage('group');
  $query = $entityStorage->getQuery();
  $query->accessCheck(FALSE);
  $query->condition('type', ['project_space', 'department'], 'IN');
  $query->notExists($field_name);
  $gids = $query->execute();
  foreach ($entityStorage->loadMultiple($gids) as $group) {
    $group->set($field_name, TRUE);
    $group->save();
  }
}

/**
 * Add a field 'allow_admins_to_edit_members' to entity type 'group'.
 */
function living_spaces_group_update_9103(&$sandbox) {
  $field_name = 'allow_admins_to_edit_members';
  $table_name = 'groups_field_data';

  if (!\Drupal::database()->schema()->fieldExists($table_name, $field_name)) {
    $definition = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Allow space admins to edit member accounts'))
      ->setDefaultValue(FALSE)
      ->setDisplayOptions('form', [
        'settings' => ['display_label' => TRUE],
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($field_name, 'group', 'living_spaces_group', $definition);
  }
}