<?php

/**
 * @file
 * Hooks and various functions for living spaces group bundle.
 */

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupInterface;
use Drupal\group\Entity\GroupRelationshipInterface;
use Drupal\group\Entity\GroupRoleInterface;
use Drupal\group\Entity\GroupTypeInterface;
use Drupal\user\UserInterface;
use Drupal\user\Entity\Role;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Link;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function living_spaces_group_group_type_access(GroupTypeInterface $type, $operation, AccountInterface $account) {
  if ($spaces = \Drupal::config('living_spaces_group.exclude_spaces')->get('spaces')) {
    if (in_array($type->id(), $spaces)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function living_spaces_group_group_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if ($spaces = \Drupal::config('living_spaces_group.exclude_spaces')->get('spaces')) {
    if (in_array($entity_bundle, $spaces)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_config_schema_info_alter().
 */
function living_spaces_group_config_schema_info_alter(&$definitions) {
  $definitions['user.mail']['mapping']['email_new_space_member'] = [
    'type' => 'mail',
    'label' => 'Space member was added',
  ];
  $definitions['user.mail']['mapping']['email_delete_space_member'] = [
    'type' => 'mail',
    'label' => 'Space member was deleted',
  ];
}

/**
 * Implements hook_mail().
 */
function living_spaces_group_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];

  $variables = [];
  $items = ['group', 'user', 'group_title'];
  foreach ($items as $item) {
    if (isset($params[$item])) {
      $variables[$item] = $params[$item];
    }
  }

  $language = $language_manager->getLanguage($langcode);
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('user.mail');

  $token_options = [
    'langcode' => $langcode,
    'callback' => 'living_spaces_group_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);

  $language_manager->setConfigOverrideLanguage($original_language);
}

/**
 * Token callback to add unsafe tokens for user mails.
 */
function living_spaces_group_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['group'])) {
    $replacements['[group:title]'] = $data['group']->label();
    $replacements['[group:url]'] = $data['group']->toUrl('canonical', ['absolute' => TRUE])->toString();
  }
  if (isset($data['group_title'])) {
    $replacements['[group_title]'] = $data['group_title'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_group_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::configFactory();
  $config_settings = $config->getEditable('user.settings');
  $config_mail = $config->getEditable('user.mail');

  $types = [
    'email_new_space_member' => t('Space member was added'),
    'email_delete_space_member' => t('Space member was deleted'),
  ];

  foreach ($types as $type => $label) {
    $form[$type] = [
      '#type' => 'details',
      '#title' => $label,
      '#group' => 'email',
    ];

    $form[$type]["{$type}_notify"] = [
      '#type' => 'checkbox',
      '#title' => t('Notify user'),
      '#default_value' => $config_settings->get("notify.{$type}"),
    ];

    $form[$type]["{$type}_subject"] = [
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $config_mail->get("{$type}.subject"),
      '#maxlength' => 180,
      '#states' => [
        'invisible' => [
          "input[name='{$type}_notify']" => ['checked' => FALSE],
        ],
      ],
    ];

    $form[$type]["{$type}_body"] = [
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => $config_mail->get("{$type}.body"),
      '#rows' => 15,
      '#states' => [
        'invisible' => [
          "input[name='{$type}_notify']" => ['checked' => FALSE],
        ],
      ],
    ];
  }

  $form['actions']['submit']['#submit'][] = 'living_spaces_group_user_settings_form_submit';
}

/**
 * Provides submit callback for user admin settings form.
 */
function living_spaces_group_user_settings_form_submit($form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('user.mail')
    ->set('email_new_space_member.subject', $form_state->getValue('email_new_space_member_subject'))
    ->set('email_new_space_member.body', $form_state->getValue('email_new_space_member_body'))
    ->set('email_delete_space_member.subject', $form_state->getValue('email_delete_space_member_subject'))
    ->set('email_delete_space_member.body', $form_state->getValue('email_delete_space_member_body'))
    ->save();

  \Drupal::configFactory()->getEditable('user.settings')
    ->set('notify.email_new_space_member', $form_state->getValue('email_new_space_member_notify'))
    ->set('notify.email_delete_space_member', $form_state->getValue('email_delete_space_member_notify'))
    ->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_group_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->get('view');

  /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
  foreach ($view->filter as $name => $filter) {
    if ('groups_field_data' == $filter->table &&
      'type' == $filter->field &&
      $filter->options['exposed']
    ) {
      $id = $filter->options['expose']['identifier'];

      // Remove excluded bundles from exposed filters.
      if (isset($form[$id]['#options']) && $spaces = \Drupal::config('living_spaces_group.exclude_spaces')->get('spaces')) {
        foreach ($form[$id]['#options'] as $bundle => $option) {
          if (in_array($bundle, $spaces)) {
            unset($form[$id]['#options'][$bundle]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function living_spaces_group_query_entity_query_alter(SelectInterface $query) {
  if ($query->getMetaData('entity_type') === 'group' && $spaces = \Drupal::config('living_spaces_group.exclude_spaces')->get('spaces')) {
    foreach ($query->getTables() as $table => $info) {
      if (is_array($info) && 'groups' == $info['table']) {
        $query->join('groups_field_data', 'groups_field_data', "groups_field_data.id = {$table}.id");
        $query->condition('groups_field_data.type', $spaces, 'NOT IN');
        break;
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function living_spaces_group_query_views_entity_query_alter(SelectInterface $query) {
  if ($query->getMetaData('entity_type') === 'group' && $spaces = \Drupal::config('living_spaces_group.exclude_spaces')->get('spaces')) {
    $query->condition('groups_field_data.type', $spaces, 'NOT IN');
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function living_spaces_group_entity_type_alter(&$entity_types) {
  $export = [
    'group_type' => ['is_living_space'],
    'group_role' => ['is_space_admin'],
  ];

  foreach ($export as $entity_type => $new_configs) {
    if (isset($entity_types[$entity_type])) {
      $configs = $entity_types[$entity_type]->get('config_export');
      foreach ($new_configs as $config) {
        $configs[] = $config;
      }
      $entity_types[$entity_type]->set('config_export', $configs);
    }
  }

  if (isset($entity_types['group'])) {
    $handlers = $entity_types['group']->getHandlerClasses();
    $handlers['form']['delete'] = 'Drupal\living_spaces_group\LivingSpacesGroupDeleteForm';
    $entity_types['group']->setHandlerClass('form', $handlers['form']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function living_spaces_group_group_relationship_delete(GroupRelationshipInterface $relationship) {
  if ('group_membership' != $relationship->getPluginId()
&& $entity = $relationship->getEntity()) {
    $entity->delete();
  }
  if ($relationship->getEntity() instanceof UserInterface) {
    living_spaces_group_update_joined_spaces($relationship->getEntity());
  }

  if ('group_membership' == $relationship->getPluginId() &&
    \Drupal::config('user.settings')->get('notify.email_delete_space_member') &&
    $account = $relationship->getEntity()
  ) {
    /** @var \Drupal\Core\Mail\MailManager $mail_manager */
    $mail_manager = \Drupal::service('plugin.manager.mail');

    if ($account->isActive() && $mail = $account->getEmail()) {
      $params = ['group_title' => $relationship->getGroup()->label(), 'user' => $account];
      $mail_manager->mail('living_spaces_group', 'email_delete_space_member', $mail, $account->getPreferredLangcode(), $params);
    }
  }

  if ('group_membership' == $relationship->getPluginId() &&
    \Drupal::config('user.settings')->get('notify.email_delete_space_member') &&
    $account = $relationship->getEntity()
  ) {
    /** @var \Drupal\Core\Mail\MailManager $mail_manager */
    $mail_manager = \Drupal::service('plugin.manager.mail');

    if ($account->isActive() && $mail = $account->getEmail()) {
      $params = ['group_title' => $relationship->getGroup()->label(), 'user' => $account];
      $mail_manager->mail('living_spaces_group', 'email_delete_space_member', $mail, $account->getPreferredLangcode(), $params);
    }
  }
}

/**
 * Process a batch of removing entity.
 */
function living_spaces_group_remove_referenced_entity($type, $id) {
  if ($entity = \Drupal::entityTypeManager()->getStorage($type)->load($id)) {
    $entity->delete();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_group_form_group_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\group\Entity\GroupTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['is_living_space'] = [
    '#type' => 'checkbox',
    '#title' => t('Living space'),
    '#default_value' => $type->get('is_living_space'),
    '#access' => \Drupal::currentUser()->hasPermission('manage living spaces'),
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function living_spaces_group_group_role_presave(GroupRoleInterface $entity) {
  $parts = explode('-', $entity->id());
  $entity->set('is_space_admin', FALSE);
  if (isset($parts[1]) && 'admin' == $parts[1]) {
    $entity->set('is_space_admin', TRUE);

    if ($entity->isNew() && \Drupal::service('living_spaces_group.manager')->isLivingSpace($parts[0])) {
      $entity->set('label', 'Space Administrator');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function living_spaces_group_group_relationship_presave(GroupRelationshipInterface $relationship) {
  $relationship->set('is_space_admin', FALSE);
  if ($relationship->getPluginId() === 'group_membership') {
    $roles = $relationship->get('group_roles')->referencedEntities();
    /** @var \Drupal\group\Entity\GroupRoleInterface $role */
    foreach ($roles as $role) {
      if ($role->get('is_space_admin')) {
        $relationship->set('is_space_admin', TRUE);
        break;
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function living_spaces_group_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  /** @var \Drupal\living_spaces_group\LivingSpacesGroupManagerInterface $living_space_manager */
  $living_space_manager = \Drupal::service('living_spaces_group.manager');
  $entity_types = $living_space_manager->getEntityTypesOfLivingSpaceGroupTypes();

  // Add field 'space' to all entity types except 'user'.
  if ($entity_type->id() !== 'user' && in_array($entity_type->id(), $entity_types)) {
    $fields['space'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Space'))
      ->setSetting('target_type', 'group')
      ->setTranslatable(FALSE);
  }

  if ($entity_type->id() == 'group') {
    $fields['allow_admins_to_edit_members'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Allow space admins to edit member accounts'))
      ->setDefaultValue(FALSE)
      ->setDisplayOptions('form', [
        'settings' => ['display_label' => TRUE],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  if (in_array($entity_type->id(), ['group_role', 'group_relationship'])) {
    $description = $entity_type->id() === 'group_role'
      ? t('Mark group role as admin role for space type.')
      : t('Mark group membership content as admin.');
    $fields['is_space_admin'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Is space admin'))
      ->setDescription($description)
      ->setDefaultValue(FALSE);
  }

  if ('group' == $entity_type->id()) {
    $fields['protected'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Protected'))
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  if ('user' == $entity_type->id()) {
    $fields['preferred_spaces'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Preferred spaces'))
      ->setSetting('target_type', 'group')
      ->setSetting('handler', 'views')
      ->setSetting('handler_settings', [
        'view' => [
          'view_name' => 'groups',
          'display_name' => 'preferred_spaces',
        ],
      ])
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->addConstraint('LivingSpacesGroupPreferredSpaces')
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 0,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['joined_spaces'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Spaces'))
      ->setSetting('target_type', 'group')
      ->setSetting('handler', 'views')
      ->setSetting('handler_settings', [
        'view' => [
          'view_name' => 'groups',
          'display_name' => 'spaces_to_join',
        ],
      ])
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->setTranslatable(FALSE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_views_query_alter().
 */
function living_spaces_group_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ('groups' == $view->id() && 'spaces_to_join' == $view->current_display) {
    $current_user = Drupal::currentUser();
    if ($current_user->hasPermission('add members to any space')) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as $key => $condition) {
          if ($condition['field'] == 'groups_field_data.id' && $condition['operator'] == 'IN') {
            unset($condition_group['conditions'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function living_spaces_group_form_user_employee_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = Drupal::currentUser();
  if (
    isset($form['joined_spaces']) &&
    !$current_user->hasPermission('add members to any space') &&
    !$current_user->hasPermission('add members to administered space')
  ) {
    $form['joined_spaces']['#access'] = FALSE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_group_user_insert(UserInterface $user) {
  $space_ids = array_column($user->get('joined_spaces')->getValue(), 'target_id');
  $groups = \Drupal::entityTypeManager()->getStorage('group')->loadMultiple($space_ids);

  /** @var Drupal\group\Entity\GroupInterface $group */
  foreach ($groups as $group) {
    $group->addMember($user);
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function living_spaces_group_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ('group' == $entity_type->id()) {
    if (!empty($fields['uid'])) {
      $fields['uid']->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -1,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'match_limit' => 10,
          'size' => '60',
          'placeholder' => '',
        ],
      ]);
      $fields['uid']->setDisplayConfigurable('form', TRUE);
    }
    if (!empty($fields['parent'])) {
      $fields['parent']->addConstraint('LivingSpacesGroupParentConstraint');
    }
  }

  if ('user' == $entity_type->id() && !empty($fields['roles'])) {
    $roles = [];
    foreach (Role::loadMultiple() as $role) {
      $roles[$role->id()] = $role->label();
    }
    $fields['roles']->setSetting('allowed_values', $roles);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function living_spaces_group_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\group\Entity\GroupTypeInterface $group */
  $group = $form_state->getFormObject()->getEntity();
  $living = \Drupal::service('living_spaces_group.manager')->isLivingSpace($group->bundle());

  if (isset($form['uid']) && $living) {
    $form['uid']['widget'][0]['target_id']['#title'] = t('Manager');
    $form['uid']['#access'] = \Drupal::currentUser()->hasPermission('manage living spaces');
  }

  if (isset($form['revision_information'])) {
    $form['revision_information']['#access'] = FALSE;
  }

  if (isset($form['protected'])) {
    $form['protected']['#access'] = \Drupal::currentUser()->hasPermission('manage protected spaces');
  }

  if (isset($form['allow_admins_to_edit_members'])) {
    $form['allow_admins_to_edit_members']['#access'] = \Drupal::currentUser()->hasPermission('manage access of admins to edit accounts in mutual space');
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function living_spaces_group_group_access(GroupInterface $group, $operation, AccountInterface $account) {
  if ('delete' == $operation && $group->get('protected')->getString() && !$account->hasPermission('manage protected spaces')) {
    return AccessResult::forbidden();
  }

  return AccessResult::allowed();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function living_spaces_group_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  // Since we add tab to other variant, tabs won't appear for this one.
  if ($route_name === 'page_manager.page_view_living_space_members_living_space_members-layout_builder-1') {
    /** @var \Drupal\Core\Menu\LocalTaskManagerInterface $manager */
    $manager = \Drupal::service('plugin.manager.menu.local_task');
    $group_data = $manager->getLocalTasks('entity.group.canonical');
    $data['tabs'][0] = $group_data['tabs'];
    $cacheability->addCacheableDependency($group_data['cacheability']);

    // Adjust active tab from group view.
    $data['tabs'][0]['group.view']['#active'] = FALSE;
    $data['tabs'][0]['living_spaces_group.members']['#active'] = TRUE;
  }

  if (!empty($data['tabs'][0]['group.edit_form'])) {
    unset($data['tabs'][0]['group.edit_form']);
  }
}

/**
 * Implements hook_living_spaces_group_actions_info().
 */
function living_spaces_group_living_spaces_group_actions_info($names_only = TRUE, GroupInterface $space = NULL, UserInterface $user = NULL, $inherited_from_circle = FALSE) {
  if ($names_only || !$space->id()) {
    return [
      'view_profile' => t('Show profile'),
      'remove_from_space' => t('Remove from Space'),
      'add_remove_admin' => t('Add/Remove as Admin'),
      'block_user' => t('Block user'),
      'unblock_user' => t('Unblock user'),
    ];
  }
  $current_user = \Drupal::currentUser()->getAccount();

  $links = [
    'view_profile' => [
      '#type' => 'link',
      '#title' => t('Show profile'),
      '#url' => Url::fromRoute('entity.user.canonical', [
        'user' => $user->id(),
      ]),
    ],
  ];

  $cache = CacheableMetadata::createFromObject($current_user);
  $cache->applyTo($links['view_profile']);

  if ($inherited_from_circle) {
    return $links;
  }

  $user_is_admin = \Drupal::service('living_spaces_group.manager')->isUserSpaceAdmin($user, $space);
  $route = $user_is_admin
    ? 'living_spaces_group.remove_admin'
    : 'living_spaces_group.assign_admin';

  $current_is_admin = \Drupal::service('living_spaces_group.manager')->isUserSpaceAdmin($current_user, $space);

  if (
    $space->getOwnerId() !== $user->id()
    && $current_user->id() != $user->id()
    && ($current_is_admin || $space->hasPermission('manage space members', $current_user))
  ) {
    $links['remove_from_space'] = [
      '#type' => 'link',
      '#title' => t('Remove from Space'),
      '#url' => Url::fromRoute('living_spaces_group.remove_member', [
        'group' => $space->id(),
        'user' => $user->id(),
      ]),
    ];
    $links['add_remove_admin'] = [
      '#type' => 'link',
      '#title' => $user_is_admin ? t('Remove as Admin') : t('Add as Admin'),
      '#url' => Url::fromRoute($route, [
        'group' => $space->id(),
        'user' => $user->id(),
      ]),
    ];

    if ($user->isActive() && $current_user->id() != $user->id()) {
      $links['block_user'] = [
        '#type' => 'link',
        '#title' => t('Block user'),
        '#url' => Url::fromRoute('living_spaces_group.block_user', [
          'group' => $space->id(),
          'user' => $user->id(),
        ]),
      ];
    }

    if ($user->isBlocked() && $current_user->id() != $user->id()) {
      $links['unblock_user'] = [
        '#type' => 'link',
        '#title' => t('Unblock user'),
        '#url' => Url::fromRoute('living_spaces_group.unblock_user', [
          'group' => $space->id(),
          'user' => $user->id(),
        ]),
      ];
    }
  }

  return $links;
}

/**
 * Implements hook_living_spaces_group_exports_info().
 */
function living_spaces_group_living_spaces_group_exports_info($names_only = TRUE, GroupInterface $space = NULL) {
  $names_export_label = t('Members list (Names & E-mail)');
  if ($names_only) {
    return [
      'export_names' => $names_export_label,
    ];
  }

  $results = [];
  $user = \Drupal::currentUser()->getAccount();
  if ($space->hasPermission('view group_membership relationship', $user) && $space->id()) {
    $results['export_names'] = [
      '#type' => 'link',
      '#title' => $names_export_label,
      '#url' => Url::fromRoute('view.members_export.data_export_names', ['group' => $space->id()]),
      '#attributes' => ['class' => ['btn', 'btn-default']],
    ];

    $cache = CacheableMetadata::createFromObject($user);
    $cache->applyTo($results['export_names']);
  }

  return $results;
}

/**
 * Implements hook_living_spaces_group_action_info().
 */
function living_spaces_group_living_spaces_group_action_info(GroupInterface $space) {
  $items = [];

  if ($space->hasPermission('edit group', \Drupal::currentUser())) {
    $items['edit'] = [
      '#type' => 'link',
      '#title' => t('Edit space'),
      '#options' => [],
      '#url' => Url::fromRoute('entity.group.edit_form', [
        'group' => $space->id(),
      ]),
    ];
  }

  if (\Drupal::currentUser()->hasPermission('manage living spaces')) {
    $items['members'] = [
      '#type' => 'link',
      '#title' => t('Manage members'),
      '#options' => [],
      '#url' => Url::fromRoute('page_manager.page_view_members_roles_members_roles-block_display-0', [
        'group' => $space->id(),
      ]),
    ];
  }

  return $items;
}

/**
 * Implements hook_group_operations_alter().
 */
function living_spaces_group_group_operations_alter(array &$operations, GroupInterface $group) {
  $allowed = ['group-join', 'group-leave'];

  if ('page_manager.page_view_living_space_members_living_space_members-layout_builder-0' == \Drupal::routeMatch()->getRouteName()) {
    foreach ($operations as $name => $operation) {
      if (!in_array($name, $allowed)) {
        unset($operations[$name]);
      }
    }
  }

  if (isset($operations['group-join'])) {
    $operations['group-join']['url'] = Url::fromRoute('living_spaces_group.group_join', [
      'group' => $group->id(),
    ], [
      'query' => [
        'destination' => \Drupal::service('redirect.destination')->get(),
      ],
    ]);
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function living_spaces_group_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ('group' == $entity->getEntityTypeId()) {
    $remove = ['revisions', 'devel', 'nodes'];

    foreach ($operations as $name => $operation) {
      if (in_array($name, $remove)) {
        unset($operations[$name]);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_group_group_relationship_insert(GroupRelationshipInterface $relationship) {
  $entity = $relationship->getEntity();

  if ($entity && $entity->hasField('space') && $entity->get('space')->isEmpty()) {
    $entity->set('space', $relationship->getGroup()->id());
    $entity->save();
  }

  if ($relationship->getEntity() instanceof UserInterface) {
    living_spaces_group_update_joined_spaces($relationship->getEntity());
  }

  if ('group_membership' == $relationship->getPluginId() && $entity &&
    \Drupal::config('user.settings')->get('notify.email_new_space_member')) {
    /** @var \Drupal\Core\Mail\MailManager $mail_manager */
    $mail_manager = \Drupal::service('plugin.manager.mail');

    if ($entity->isActive() && $mail = $entity->getEmail()) {
      $params = ['group' => $relationship->getGroup(), 'user' => $entity];
      $mail_manager->mail('living_spaces_group', 'email_new_space_member', $mail, $entity->getPreferredLangcode(), $params);
    }
  }

  if ('group_membership' == $relationship->getPluginId() && $entity &&
    \Drupal::config('user.settings')->get('notify.email_new_space_member')) {
    /** @var \Drupal\Core\Mail\MailManager $mail_manager */
    $mail_manager = \Drupal::service('plugin.manager.mail');

    if ($entity->isActive() && $mail = $entity->getEmail()) {
      $params = ['group' => $relationship->getGroup(), 'user' => $entity];
      $mail_manager->mail('living_spaces_group', 'email_new_space_member', $mail, $entity->getPreferredLangcode(), $params);
    }
  }
}

/**
 * Helper to update 'joined_spaces' field value.
 */
function living_spaces_group_update_joined_spaces(UserInterface $user) {
  $memberships = \Drupal::service('group.membership_loader')->loadByUser($user);
  $space_manager = \Drupal::service('living_spaces_group.manager');

  $gids = [];
  foreach ($memberships as $membership) {
    $group = $membership->getGroup();
    if ($group && $space_manager->isLivingSpace($group->bundle())) {
      $gids[]['target_id'] = $group->id();
    }
  }

  $user->set('joined_spaces', $gids);
  $user->save();
}

/**
 * Implements hook_living_spaces_breadcrumbs_info().
 */
function living_spaces_group_living_spaces_breadcrumbs_info(RouteMatchInterface $route_match, Breadcrumb $breadcrumb = NULL) {
  $applies = FALSE;

  if ('entity.group.canonical' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink(Link::createFromRoute($group->label(), '<none>'));
      $breadcrumb->addCacheableDependency($group);
    }
  }

  if ('entity.group.content_translation_overview' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Translations'), '<none>'));
    }
  }

  if ('page_manager.page_view_living_space_members_living_space_members-layout_builder-0' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Members'), '<none>'));
    }
  }

  if ('entity.group.edit_form' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Edit @group', ['@group' => $group->label()]), '<none>'));
    }
  }

  if ('entity.group.delete_form' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Delete @group', ['@group' => $group->label()]), '<none>'));
    }
  }

  if ('view.group_nodes.page_1' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Nodes'), '<none>'));
    }
  }

  if ('entity.group_relationship.collection' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('All entities'), '<none>'));
    }
  }

  if ('entity.group_relationship.add_page' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Add existing content'), '<none>'));
    }
  }

  if ('entity.group_relationship.add_form' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];
      $plugin = $group->getGroupType()->getPlugin($parameters['plugin_id']);

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Add @plugin', ['@plugin' => $plugin->getRelationType()->getLabel()]), '<none>'));
    }
  }

  if ('entity.group_relationship.create_page' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Add new content'), '<none>'));
    }
  }

  if ('entity.group_relationship.create_form' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];
      $plugin = $group->getGroupType()->getPlugin($parameters['plugin_id']);

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Add new @plugin', ['@plugin' => $plugin->getRelationType()->getLabel()]), '<none>'));
    }
  }

  if ('page_manager.page_view_members_roles_members_roles-block_display-0' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $parameters = $route_match->getParameters()->all();

      /** @var \Drupal\group\Entity\GroupInterface $group */
      $group = $parameters['group'];

      $breadcrumb->addLink($group->toLink($group->label()));
      $breadcrumb->addCacheableDependency($group);

      $breadcrumb->addLink(Link::createFromRoute(t('Members & Roles'), '<none>'));
    }
  }

  if ('page_manager.page_view_dashboard_dashboard-layout_builder-0' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Dashboard'), '<none>'));
    }
  }

  if ('page_manager.page_view_spaces_spaces-layout_builder-0' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
      $breadcrumb->addLink(Link::createFromRoute(t('Spaces'), '<none>'));
    }
  }

  if ('entity.taxonomy_vocabulary.overview_form' == $route_match->getRouteName() &&
    'chat_subjects' == $route_match->getParameter('taxonomy_vocabulary')->id()
  ) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
      $breadcrumb->addLink(Link::createFromRoute(t('Chat Subjects'), '<none>'));
    }
  }

  return $applies;
}

/**
 * Implements hook_living_spaces_group_exclude_permissions().
 */
function living_spaces_group_living_spaces_group_exclude_permissions() {
  $permissions = ['administer members', 'manage space members'];

  return $permissions;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function living_spaces_group_group_update(GroupInterface $group) {
  if (!$group->hasField('circles')) {
    return;
  }
  $circle_ids = array_column($group->get('circles')->getValue(), 'target_id');
  $original_ids = array_column($group->original->get('circles')->getValue(), 'target_id');

  $removed = array_diff($original_ids, $circle_ids);
  foreach ($removed as $id) {
    /** @var \Drupal\group\Entity\GroupInterface $circle */
    $circle = \Drupal::entityTypeManager()->getStorage('group')->load($id);
    /** @var \Drupal\group\GroupMembershipLoaderInterface $membership_loader */
    $membership_loader = \Drupal::service('group.membership_loader');
    $memberships = $membership_loader->loadByGroup($circle);
    foreach ($memberships as $membership) {
      if ($member = $membership->getUser()) {
        $message = \Drupal::entityTypeManager()->getStorage('message')->create([
          'template' => 'group_member_removed',
          'uid' => $member->id(),
          'field_group_label' => $group->label(),
          'field_related_space' => ['target_id' => $group->id()],
        ]);
        $message->save();
      }
    }
  }

  $added = array_diff($circle_ids, $original_ids);
  foreach ($added as $id) {
    /** @var \Drupal\group\Entity\GroupInterface $circle */
    $circle = \Drupal::entityTypeManager()->getStorage('group')->load($id);
    /** @var \Drupal\group\GroupMembershipLoaderInterface $membership_loader */
    $membership_loader = \Drupal::service('group.membership_loader');
    $memberships = $membership_loader->loadByGroup($circle);
    foreach ($memberships as $membership) {
      if ($member = $membership->getUser()) {
        $message = \Drupal::entityTypeManager()->getStorage('message')->create([
          'template' => 'group_member_added',
          'uid' => $member->id(),
          'field_group_label' => $group->label(),
          'field_related_space' => ['target_id' => $group->id()],
        ]);
        $message->save();
      }
    }
  }

}
