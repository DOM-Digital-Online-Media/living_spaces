<?php

/**
 * @file
 * Contains functions and hooks for living_spaces_menus.module.
 */

use Drupal\user\UserInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function living_spaces_menus_user_update(UserInterface $user) {
  $field_joined = 'joined_spaces';
  $field_favorite = 'field_favorite_spaces';
  $cache_keys = [];
  $need_clear_cache = FALSE;

  if ($user->hasField($field_joined)) {
    if (!$user->get($field_joined)->equals($user->original->get($field_joined))) {
      \Drupal::service('plugin.manager.menu.link')->rebuild();

      $need_clear_cache = TRUE;
    }
  }

  if ($user->hasField($field_favorite) && !$user->get($field_favorite)->equals($user->original->get($field_favorite))) {
    $need_clear_cache = TRUE;
  }

  if ($need_clear_cache) {
    $connection = \Drupal::database();

    $result = $connection->query("SELECT cid FROM cache_render WHERE cid LIKE '%living_spaces_barrio_ap_collapsible_menu%'")
      ->fetchAllAssoc('cid', \PDO::FETCH_ASSOC);

    if ($result) {
      $cache_keys = array_keys($result);
    }

    if ($cache_keys) {
      \Drupal::service('cache.render')->invalidateMultiple($cache_keys);
    }
    else {
      \Drupal::service('cache.render')->invalidateAll();
    }
  }
}

/**
 * Implements hook_collapsible_menu_alter().
 */
function living_spaces_menus_dom_bootstrap_collapsible_menu_alter(&$build) {
  $spaces_menu_key = 'menu_link_content:436e7a5e-7eb0-4ba7-928c-b9064865f174';
  $have_favorites = FALSE;
  $connection = \Drupal::database();

  $query = $connection->select('groups_field_data', 'groups_field_data');
  $query->addTag('living_spaces_menus_user_spaces');
  $query->fields('groups_field_data', ['id', 'label']);
  $query->condition('groups_field_data.status', 1, '=')
    ->orderBy('groups_field_data.label', 'ASC')
    ->range(0, 8);

  $result = $query->execute()->fetchAll();

  if ($result) {
    $links = [];

    foreach ($result as $key => $item) {
      if ($item->entity_id) {
        $have_favorites = TRUE;
      }

      if (!$item->entity_id && $have_favorites) {
        $have_favorites = FALSE;

        $links['living_spaces_menus.items_delimiter'] = [
          'put_delimiter' => TRUE,
        ];
      }

      $links['living_spaces_menus.space:' . $item->id] = [
        'is_expanded' => FALSE,
        'is_collapsed' => FALSE,
        'in_active_trail' => FALSE,
        'attributes' => new Attribute(),
        'title' => $item->label,
        'url' => Url::fromRoute('entity.group.canonical', ['group' => $item->id]),
        'below' => [],
      ];
    }

    if ($have_favorites) {
      $links['living_spaces_menus.items_delimiter'] = [
        'put_delimiter' => TRUE,
      ];
    }

    array_push($links, end($build['#items'][$spaces_menu_key]['below']));

    $build['#items'][$spaces_menu_key]['below'] = $links;
  }
}
