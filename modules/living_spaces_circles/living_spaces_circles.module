<?php

/**
 * @file
 * Contains living_spaces_circles.module.
 */

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_base_field_info().
 */
function living_spaces_circles_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ('group' == $entity_type->id()) {
    $fields['circles'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Circles'))
      ->setSetting('target_type', 'group')
      ->setSetting('handler_settings', ['target_bundles' => ['circle' => 'circle']])
      ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
      ->setTranslatable(FALSE);
  }

  return $fields;
}

/**
 * Implements hook_living_spaces_group_exclude_permissions().
 */
function living_spaces_circles_living_spaces_group_exclude_permissions() {
  return ['manage circle spaces'];
}

/**
 * Implements hook_living_spaces_circles_actions_info().
 */
function living_spaces_circles_living_spaces_circles_actions_info(GroupInterface $group, GroupInterface $circle) {
  $links = [];

  if (\Drupal::currentUser()->hasPermission('manage circle spaces')) {
    $links['remove_circle'] = [
      '#type' => 'link',
      '#title' => t('Remove circle'),
      '#options' => [],
      '#url' => Url::fromRoute('living_spaces_circles.remove_circle', [
        'group' => $group->id(),
        'circle' => $circle->id(),
      ]),
    ];
  }

  return $links;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_circles_group_insert(GroupInterface $entity) {
  if ('circle' == $entity->bundle() && $space = \Drupal::request()->query->get('space')) {
    $entity_manager = \Drupal::entityTypeManager()->getStorage('group');

    /** @var \Drupal\group\Entity\Group $group */
    if ($group = $entity_manager->load($space)) {
      if ($group->get('circles')->isEmpty() || !array_search($entity->id(), array_column($group->get('circles')->getValue(), 'target_id'))) {
        $group->get('circles')->appendItem([
          'target_id' => $entity->id(),
        ]);
        $group->save();
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function living_spaces_circles_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ('group' == $entity->getEntityTypeId() && 'circle' == $entity->bundle()) {
    $options = ['edit', 'delete'];

    foreach ($operations as $name => $operation) {
      if (!in_array($name, $options)) {
        unset($operations[$name]);
      }
    }
  }
}

/**
 * Implements hook_living_spaces_breadcrumbs_info().
 */
function living_spaces_circles_living_spaces_breadcrumbs_info(RouteMatchInterface $route_match, Breadcrumb $breadcrumb = NULL) {
  $applies = FALSE;

  if ('view.groups.circles' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
      $breadcrumb->addLink(Link::createFromRoute(t('Circles'), '<none>'));
    }
  }

  if ('entity.group.add_form' == $route_match->getRouteName()) {
    $parameters = $route_match->getParameters()->all();

    /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
    $group_type = $parameters['group_type'];

    if ('circle' == $group_type->bundle()) {
      $applies = TRUE;

      if (!empty($breadcrumb)) {
        $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
        $breadcrumb->addLink(Link::createFromRoute(t('Circles'), '<none>'));
        $breadcrumb->addLink(Link::createFromRoute(t('Add Circle'), '<none>'));
      }
    }
  }

  return $applies;
}
