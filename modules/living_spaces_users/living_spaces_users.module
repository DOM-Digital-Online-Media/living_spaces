<?php

/**
 * @file
 * Contains living_spaces_users.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\profile\Entity\ProfileInterface;

/**
 * Implements hook_module_implements_alter().
 */
function living_spaces_users_module_implements_alter(&$implementations, $hook) {
  if ('form_alter' == $hook && isset($implementations['living_spaces_users'])) {
    $group = $implementations['living_spaces_users'];
    unset($implementations['living_spaces_users']);
    $implementations['living_spaces_users'] = $group;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function living_spaces_users_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $current_user = \Drupal::currentUser();

  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getFormObject()->getEntity();

  if (isset($form['account']['roles']) && $current_user->hasPermission('administer permissions')) {
    $weights = living_spaces_users_get_role_weights();
    $current_user_level = living_spaces_users_get_user_level($current_user, $weights);
    $user_level = living_spaces_users_get_user_level($user, $weights);

    $access = $current_user_level <= $user_level;
    $form['account']['roles']['#access'] = $access;
  }

  if (isset($form['account']['pass'])) {
    $form['account']['pass']['#after_build'][] = 'living_spaces_users_pass_after_build';
    $access = FALSE;

    if ($current_user->hasPermission('change any passwords')) {
      $access = TRUE;
    }

    if (!$access && $current_user->id() == $user->id()) {
      $access = TRUE;
    }

    if (!$access && $current_user->hasPermission('change member passwords')) {
      $current = \Drupal::entityTypeManager()->getStorage('user')->load($current_user->id());
      $own_spaces = $current->get('joined_spaces')->getValue();
      $own_spaces = array_column($own_spaces, 'target_id');

      if ($own_spaces) {
        $user_spaces = $user->get('joined_spaces')->getValue();
        $user_spaces = array_column($user_spaces, 'target_id');

        $exist = array_intersect($own_spaces, $user_spaces);
        if (!empty($exist)) {
          $access = TRUE;
        }
      }
    }

    $form['account']['pass']['#access'] = $access;
  }
}

/**
 * Helper to get user role weights.
 */
function living_spaces_users_get_role_weights() {
  $weights = [];
  $storage = \Drupal::entityTypeManager()->getStorage('user_role');

  /** @var \Drupal\user\RoleInterface $name */
  foreach ($storage->loadMultiple() as $name => $role) {
    $weights[$name] = $role->getWeight();
  }

  return $weights;
}

/**
 * Helper to get user level.
 */
function living_spaces_users_get_user_level(AccountInterface $account, $weights = []) {
  $level = 100;
  $weights = empty($weights) ? living_spaces_users_get_role_weights() : $weights;

  foreach ($account->getRoles() as $role) {
    if (isset($weights[$role]) && $weights[$role] < $level) {
      $level = $weights[$role];
    }
  }

  return $level;
}

/**
 * Provides after build callback for the pass form element.
 */
function living_spaces_users_pass_after_build($element, FormStateInterface $form_state) {
  if (isset($element['pass1'])) {
    $element['pass1']['#title'] = t('New Password');
  }

  if (isset($element['pass2'])) {
    $element['pass2']['#title'] = t('Confirm new password');
  }

  return $element;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function living_spaces_users_profile_access(ProfileInterface $entity, $operation, AccountInterface $account) {
  if (\Drupal::moduleHandler()->moduleExists('living_spaces_intranet')) {
    /** @var \Drupal\user\UserInterface $entity */
    $current = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
    $own_spaces = $current->get('joined_spaces')->getValue();
    $own_spaces = array_column($own_spaces, 'target_id');

    if ($own_spaces && $entity->getOwnerId() !== $account->id()) {
      $user_spaces = $entity->getOwner()->get('joined_spaces')->getValue();
      $user_spaces = array_column($user_spaces, 'target_id');

      $same = array_intersect($own_spaces, $user_spaces);
      if ($operation === 'view' && !empty($same)) {
        return AccessResult::allowed();
      }

      if ($operation === 'update') {
        foreach ($same as $group_id) {
          /** @var \Drupal\group\Entity\GroupInterface $group */
          if (
            ($group = \Drupal::entityTypeManager()->getStorage('group')->load($group_id))
            && $group->allow_admins_to_edit_members->value
            && \Drupal::service('living_spaces_group.manager')->isUserSpaceAdmin($account, $group)
          ) {
            return AccessResult::allowed();
          }
        }
      }
    }
  }

  if ('employee_data' == $entity->bundle()) {
    $permission = 'manage employee profiles';
    return $account->hasPermission($permission)
      ? AccessResult::allowed()
      : AccessResult::forbidden();
  }

  if (\Drupal::moduleHandler()->moduleExists('living_spaces_group') &&
    'view' == $operation &&
    $entity->getOwnerId() !== $account->id()
  ) {
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
    if ($user_spaces = $user->get('joined_spaces')->getValue()) {
      $user_space_ids = array_column($user_spaces, 'target_id');

      if ($owner_spaces = $entity->getOwner()->get('joined_spaces')->getValue()) {
        $owner_space_ids = array_column($owner_spaces, 'target_id');

        if (array_intersect($user_space_ids, $owner_space_ids)) {
          return AccessResult::allowed();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_users_profile_insert(ProfileInterface $entity) {
  search_api_entity_update($entity->getOwner());
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function living_spaces_users_profile_update(ProfileInterface $entity) {
  search_api_entity_update($entity->getOwner());
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function living_spaces_users_profile_delete(ProfileInterface $entity) {
  if ($entity->getOwner()) {
    search_api_entity_update($entity->getOwner());
  }
}

/**
 * Implements hook_user_cancel().
 */
function living_spaces_users_user_cancel($edit, $account, $method) {
  if ('user_cancel_block' == $method) {
    $account->setUsername(t('Deleted employee', [], ['langcode' => $account->getPreferredLangcode()]) . " {$account->id()}");
    $account->setEmail(t('former-employee-', [], ['langcode' => $account->getPreferredLangcode()]) . "{$account->id()}@d.d.dom.de");
  }
}

/**
 * Implements hook_living_spaces_group_exports_info().
 */
function living_spaces_users_living_spaces_group_exports_info($names_only = TRUE, \Drupal\group\Entity\GroupInterface $space = NULL) {
  $full_export_label = t('Members list (Full data)');
  if ($names_only) {
    return [
      'export_full' => $full_export_label,
    ];
  }

  $results = [];
  $user = \Drupal::currentUser()->getAccount();
  if ($user->hasPermission('manage living spaces') && $space->id()) {
    $results['export_full'] = [
      '#type' => 'link',
      '#title' => $full_export_label,
      '#url' => Url::fromRoute('view.members_export.data_export_full', ['group' => $space->id()]),
      '#attributes' => ['class' => ['btn', 'btn-default']],
    ];
    $cache = CacheableMetadata::createFromObject($user);
    $cache->applyTo($results['export_full']);
  }

  return $results;
}

/**
 * Implements hook_views_data().
 */
function living_spaces_users_views_data() {
  $data = [];

  $data['views']['living_spaces_is_current_user_in_field'] = [
    'title' => t('Current User is present in the field'),
    'filter' => [
      'title' => t('Current User is present in the field'),
      'id' => 'living_spaces_is_current_user_in_field',
    ],
  ];

  return $data;
}

/**
 * Implements hook_living_spaces_breadcrumbs_info().
 */
function living_spaces_users_living_spaces_breadcrumbs_info(RouteMatchInterface $route_match, Breadcrumb $breadcrumb = NULL) {
  $applies = FALSE;
  if ('view.users.employee' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
      $breadcrumb->addLink(Link::createFromRoute(t('Employees'), '<none>'));
    }
  }

  if ('flood_control.unblock_form' == $route_match->getRouteName()) {
    $applies = TRUE;

    if (!empty($breadcrumb)) {
      $breadcrumb->addLink(Link::createFromRoute(t('Management'), '<none>'));
      $breadcrumb->addLink(Link::createFromRoute(t('Automatic Bans'), '<none>'));
    }
  }

  return $applies;
}
